#![warn(
    missing_docs,
    rust_2018_idioms,
    clippy::pedantic,
    missing_debug_implementations
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

//! # Valid8
//! A simple validation library.
//!
//! # Example
//!
//! Use the validators to validate values.
//! ```rust
//! use valid8::Validator;
//! use valid8::validator::Min;
//!
//! let validator = Min::<u32>::new(5);
//! let invalid = "1234";
//! assert!(validator.validate(&invalid).is_err());
//!
//! let valid = "12345";
//! assert!(validator.validate(&valid).is_ok());
//! ```
//!
//! Use the `derive(Validate)` macro to generate validation code for structs.

#![cfg_attr(
    feature = "derive",
    doc = r#"
```rust
use valid8::Validate;

#[derive(Validate)]
struct User {
    #[validate(required)]
    username: String,
    #[validate(required, email)]
    email: String,
    #[validate(required, min(8))]
    password: String,
}

let valid = User {
    username: String::from("Joe"),
    email: String::from("joe@example.com"),
    password: String::from("12345678"),
};

assert!(valid.validate().is_ok());

let invalid = User {
    username: String::from(""),
    email: String::from("joe@example"),
    password: String::from("1234567"),
};

assert!(invalid.validate().is_err());
```
"#
)]

/// Validators for different types.
pub mod validator;

pub use regex;
pub use validator::Validator;

#[cfg_attr(docsrs, doc(cfg(feature = "derive")))]
#[cfg(feature = "derive")]
pub use valid8_derive::Validate;

#[cfg_attr(docsrs, doc(cfg(feature = "derive")))]
#[cfg(feature = "derive")]
/// The error returned by the validate method generated by the `derive(Validate)` macro.
#[derive(Debug)]
pub enum ValidationError {
    /// The field specified by `0` failed [`validator::Required`] validation.
    Missing(String),
    /// Some field failed [`validator::Email`] validation.
    Email,
    /// The field specified by `0` failed [`validator::Min`] validation.
    Min(String),
}

#[cfg(feature = "derive")]
impl std::fmt::Display for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ValidationError::Email => f.write_str("Invalid email."),
            ValidationError::Missing(field) => {
                f.write_fmt(format_args!("Missing required field `{field}`."))
            }
            ValidationError::Min(field) => f.write_fmt(format_args!(
                "Field `{field}` failed minimum size validation."
            )),
        }
    }
}
